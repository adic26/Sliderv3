<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TsdLib.TestSystem</name>
    </assembly>
    <members>
        <member name="T:TsdLib.TestSystem.Controller.ControllerBase`1">
            <summary>
            Contains base functionality for the system controller without station/product/test configuration.
            </summary>
            <typeparam name="TView">Type of the derived user interface.</typeparam>
        </member>
        <member name="T:TsdLib.TestSystem.Controller.ControllerBase`4">
            <summary>
            Contains base functionality for the system controller.
            </summary>
            <typeparam name="TView">Type of the derived user interface.</typeparam>
            <typeparam name="TStationConfig">Type of the derived station config.</typeparam>
            <typeparam name="TProductConfig">Type of the derived product config.</typeparam>
            <typeparam name="TTestConfig">Type of the derived test config.</typeparam>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.#ctor(TsdLib.Configuration.ITestDetails,TsdLib.Configuration.Connections.IConfigConnection,System.Boolean)">
            <summary>
            Initialize a new system controller.
            </summary>
            <param name="testDetails">An <see cref="T:TsdLib.Configuration.ITestDetails"/> object containing metadata describing the test request.</param>
            <param name="configConnection">An <see cref="T:TsdLib.Configuration.Connections.IConfigConnection"/> object to handle configuration persistence with a database.</param>
            <param name="localDomain">True to execute the test sequence in the local application domain. Disables dynamic sequence/instrument generation.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.ExecuteTestSequence(System.Object,System.EventArgs)">
            <summary>
            Default handler for the ViewBase.ExecuteTestSequence event.
            </summary>
            <param name="sender">Object that raised the exception. Should be a reference to the Execute Test Sequence button.</param>
            <param name="e">An emptry EventArgs object.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.EditConfiguration(System.Object,TsdLib.Configuration.IConfigManager[])">
            <summary>
            Default handler for the ViewBase.ViewEditConfiguration event.
            </summary>
            <param name="sender">Object that raised the exception. Should be a reference to the View/Edit Configuration button.</param>
            <param name="configManagers">An array of <see cref="T:TsdLib.Configuration.IConfigManager"/> objects containing the configuration data.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.EditTestDetails(System.Object,System.Boolean)">
            <summary>
            Default handler for the ViewBase.ViewEditConfiguration event.
            </summary>
            <param name="sender">Object that raised the exception. Should be a reference to the View/Edit Configuration button.</param>
            <param name="e">True if requesting to use database settings. False otherwise.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.SaveResults(TsdLib.Measurements.ITestResults)">
            <summary>
            Saves the specified <see cref="T:TsdLib.Measurements.ITestResults"/> as xml and csv to the TsdLib.SpecialFolders location.
            </summary>
            <param name="results">The <see cref="T:TsdLib.Measurements.ITestResults"/> that was captured by the test sequence.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.PublishResults(TsdLib.Measurements.ITestResults)">
            <summary>
            Override to published the specified <see cref="T:TsdLib.Measurements.ITestResults"/> to a database or user-defined location.
            </summary>
            <param name="results">The <see cref="T:TsdLib.Measurements.ITestResults"/> that was captured by the test sequence.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.AbortTestSequence(System.Object,System.EventArgs)">
            <summary>
            Default handler for the <see cref="E:TsdLib.UI.ITestSequenceControl.AbortTestSequence"/> event.
            </summary>
            <param name="sender">The <see cref="T:TsdLib.UI.IView"/> that raised the event.</param>
            <param name="e">Empty event args.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.GenerateAdditionalCodeCompileUnits(System.String)">
            <summary>
            Generates a sequence of <see cref="T:System.CodeDom.CodeCompileUnit"/> objects to be dynamically compiled for the test sequence. Not used when the -localDomain command-line switch is used.
            </summary>
            <returns>A sequence of <see cref="T:System.CodeDom.CodeCompileUnit"/> objects.</returns>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`4.UIClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Default handler for the <see cref="E:TsdLib.UI.IView.UIClosing"/> event.
            </summary>
            <param name="sender">The <see cref="T:TsdLib.UI.IView"/> that raised the event.</param>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> object to provide an opportunity to cancel the closing operation.</param>
        </member>
        <member name="P:TsdLib.TestSystem.Controller.ControllerBase`4.UI">
            <summary>
            Gets a reference to the user interface.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.Controller.ControllerBase`4.Details">
            <summary>
            Gets or sets the metadata describing the test request.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.Controller.ControllerBase`4.LoggingTasks">
            <summary>
            Gets a list of active tasks responsible for logging test results.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.Controller.ControllerBase`4.configManagerProvider">
            <summary>
            Gets a provider that can be used to retrieve configuration manager instances for modifying, storing and recalling configuration data.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerBase`1.#ctor(TsdLib.Configuration.ITestDetails,TsdLib.Configuration.Connections.IConfigConnection,System.Boolean)">
            <summary>
            Initialize a new system controller.
            </summary>
            <param name="testDetails">An <see cref="T:TsdLib.Configuration.ITestDetails"/> object containing metadata describing the test request.</param>
            <param name="configConnection">An <see cref="T:TsdLib.Configuration.Connections.IConfigConnection"/> object to handle configuration persistence with a database.</param>
            <param name="localDomain">True to execute the test sequence in the local application domain. Disables dynamic sequence/instrument generation.</param>
        </member>
        <member name="T:TsdLib.TestSystem.Controller.ControllerProxy">
            <summary>
            Encapsulates the <see cref="N:TsdLib.TestSystem.Controller"/> event handlers, allowing them to be executed in a remote AppDomain.
            These event handlers will be executed on the UI thread.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerProxy.#ctor(TsdLib.UI.IView,TsdLib.TestSystem.ICancellationManager)">
            <summary>
            Initialize a new 
            </summary>
            <param name="view">An instance of <see cref="T:TsdLib.UI.IView"/> that will be used to handle UI events.</param>
            <param name="testSequenceCancellationManager">Reference to the test sequence cancellation manager.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerProxy.InfoAdded(System.Object,TsdLib.Measurements.ITestInfo)">
            <summary>
            Default handler for the <see cref="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.InfoEventProxy"/>. Calls <see cref="M:TsdLib.UI.ITestInfoDisplayControl.AddTestInfo(TsdLib.Measurements.ITestInfo)"/>.
            </summary>
            <param name="sender">The <see cref="T:TsdLib.TestSystem.TestSequence.TestSequenceBase"/> where the information was captured.</param>
            <param name="testInfo">The <see cref="T:TsdLib.Measurements.ITestInfo"/> that was captured.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerProxy.MeasurementAdded(System.Object,TsdLib.Measurements.IMeasurement)">
            <summary>
            Default handler for the <see cref="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.MeasurementEventProxy"/>. Calls <see cref="M:TsdLib.UI.IMeasurementDisplayControl.AddMeasurement(TsdLib.Measurements.IMeasurement)"/>.
            </summary>
            <param name="sender">The <see cref="T:TsdLib.TestSystem.TestSequence.TestSequenceBase"/> where the measurement was captured.</param>
            <param name="measurementBase">The <see cref="T:TsdLib.Measurements.IMeasurement"/> that was captured.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerProxy.ProgressUpdated(System.Object,System.Tuple{System.Int32,System.Int32})">
            <summary>
            Default handler for the <see cref="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.MeasurementEventProxy"/>. Calls <see cref="M:TsdLib.UI.IMeasurementDisplayControl.AddMeasurement(TsdLib.Measurements.IMeasurement)"/>.
            </summary>
            <param name="sender">The <see cref="T:TsdLib.TestSystem.TestSequence.TestSequenceBase"/> where the measurement was captured.</param>
            <param name="progress">The progress represented as a percentage.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.ControllerProxy.DataAdded(System.Object,System.Object)">
            <summary>
            Default handler for the <see cref="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.DataEventProxy"/>. Calls <see cref="M:TsdLib.UI.IView.AddData(System.Object)"/>.
            </summary>
            <param name="sender">The <see cref="T:TsdLib.TestSystem.TestSequence.TestSequenceBase"/> where the measurement was captured.</param>
            <param name="data">The data that was captured.</param>
        </member>
        <member name="P:TsdLib.TestSystem.Controller.ControllerProxy.ViewProxy">
            <summary>
            Gets a reference to the View object, representing the user interface.
            </summary>
        </member>
        <member name="T:TsdLib.TestSystem.Controller.EventProxy`1">
            <summary>
            Proxy object that can be used to send events across thread and AppDomain boundaries.
            </summary>
            <typeparam name="T">Type of EventArgs to assign to the event.</typeparam>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.EventProxy`1.InitializeLifetimeService">
            <summary>
            Returns null to ensure that the remote object's lifetime is as long as the hosting AppDomain.
            </summary>
            <returns>Null, which corresponds to an unlimited lease time.</returns>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.EventProxy`1.Attach(System.EventHandler{`0},System.Threading.SynchronizationContext)">
            <summary>
            Attach the specified handler to an event.
            </summary>
            <param name="handler">EventHandler delegate to be called when the event is fired.</param>
            <param name="context">OPTIONAL: A <see cref="T:System.Threading.SynchronizationContext"/> on which to fire the event.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.EventProxy`1.FireEvent(System.Object,`0)">
            <summary>
            Fires the event.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="eventAgrs">EventArgs object to attach to the event.</param>
        </member>
        <member name="M:TsdLib.TestSystem.Controller.EventProxy`1.#ctor">
            <summary>
            Initialize a new EventProxy.
            </summary>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.ConfigurableTestSequence`3">
            <summary>
            Represents a test sequence that can be executed with configuration parameters.
            </summary>
            <typeparam name="TStationConfig">Type of Station Config used in the derived class.</typeparam>
            <typeparam name="TProductConfig">Type of Product Config used in the derived class.</typeparam>
            <typeparam name="TTestConfig">Type of Test Config used in the derived class.</typeparam>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.TestSequenceBase">
            <summary>
            Contains functionality to connect a test sequence to the system controller
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.#ctor">
            <summary>
            Initializes the TestSequenceBase object.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.AddTraceListener(System.Diagnostics.TraceListener)">
            <summary>
            Adds the specified TraceListener to the Trace Listeners collection. Useful if running the test sequence from a separate application domain.
            </summary>
            <param name="listener">TraceListener to add to the Trace Listeners collection.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.AddTestInfo(TsdLib.Measurements.ITestInfo)">
            <summary>
            Add a new <see cref="T:TsdLib.Measurements.ITestInfo"/> to the collection of test information.
            </summary>
            <param name="testInfo">test information to add.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.AddMeasurement(TsdLib.Measurements.IMeasurement)">
            <summary>
            Add a new <see cref="T:TsdLib.Measurements.MeasurementBase"/> to the collection of test measurements.
            </summary>
            <param name="measurement">Measurement information to add.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.UpdateProgress(System.Int32,System.Int32)">
            <summary>
            Update the application controller of the current test sequence progress.
            </summary>
            <param name="currentStep">The current step in the test sequence.</param>
            <param name="numberOfSteps">The total number of steps in the test sequence.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.SendData``1(``0)">
            <summary>
            Send data to the application controller.
            </summary>
            <param name="data">Data that can be marshalled across AppDomain boundaries as a value type.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.Instruments_InstrumentConnected(System.Object,TsdLib.Instrument.IInstrument)">
            <summary>
            Event handler invoked when an instrument is connected to the test sequence.
            Adds instrument information to the test information.
            Override to modify the behaviour.
            </summary>
            <param name="sender">The instrument factory responsible for connecting to the instrument.</param>
            <param name="instrument">The new instrument.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.Dispose(System.Boolean)">
            <summary>
            Dispose of the <see cref="T:TsdLib.TestSystem.IInstrumentCollection"/>
            </summary>
            <param name="disposing">True to dispose managed resources.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceBase.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>null</returns>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.CancellationManager">
            <summary>
            Gets an <see cref="T:TsdLib.TestSystem.ICancellationManager"/> object responsible for cancelling the test sequence due to error or user abort.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.Instruments">
            <summary>
            Gets a collection of instruments currently controlled used by the test sequence.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.Config">
            <summary>
            Gets or sets the <see cref="T:TsdLib.Configuration.Managers.ConfigManagerProvider"/> that can be used to access configuration data from inside the test sequence.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.MeasurementEventProxy">
            <summary>
            Gets or sets an EventProxy object that can be used to send measurement events across AppDomain boundaries.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.InfoEventProxy">
            <summary>
            Gets or sets an EventProxy object that can be used to send information events across AppDomain boundaries.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.ProgressEventProxy">
            <summary>
            Gets or sets an EventProxy object that can be used to send progress updates across AppDomain boundaries.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.DataEventProxy">
            <summary>
            Gets or sets an EventProxy object that can be used to send general data across AppDomain boundaries.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.Measurements">
            <summary>
            Gets the collection of measurements captured during the test sequence.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceBase.TestInfo">
            <summary>
            Gets the collection of information captured during the test sequence.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.ConfigurableTestSequence`3.ExecutePreTest(System.Threading.CancellationToken,`0,`1)">
            <summary>
            Performs initialization or connection setup befoer the test begins.
            </summary>
            <param name="token">A cancellation token used to support cooperative cancellation. Should periodically call <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/>.</param>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.ConfigurableTestSequence`3.ExecutePostTest(System.Threading.CancellationToken,`0,`1)">
            <summary>
            Perform teardown or disconnection after the test is complete, but make sure to call base.ExecutePostTest in the overriding method.
            </summary>
            <param name="token">A cancellation token used to support cooperative cancellation. Should periodically call <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/>.</param>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.ConfigurableTestSequence`3.ExecuteSequence(`0,`1,`2[])">
            <summary>
            Start execution of the test sequence with the specified configuration objects.
            </summary>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
            <param name="testConfigs">An array of test config objects containing test-specific configuration.</param>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.MultiConfigTestSequence`3">
            <summary>
            Represents a test sequence that can access multiple test config objects in a single execution.
            </summary>
            <typeparam name="TStationConfig">Type of Station Config used in the derived class.</typeparam>
            <typeparam name="TProductConfig">Type of Product Config used in the derived class.</typeparam>
            <typeparam name="TTestConfig">Type of Test Config used in the derived class.</typeparam>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.MultiConfigTestSequence`3.ExecuteTest(System.Threading.CancellationToken,`0,`1,`2[])">
            <summary>
            Client application overrides this method to define test steps.
            </summary>
            <param name="token">A cancellation token used to support cooperative cancellation. Should periodically call <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/>.</param>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
            <param name="testConfigs">An array of test config objects containing test-specific configuration.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.MultiConfigTestSequence`3.ExecuteSequence(`0,`1,`2[])">
            <summary>
            Start execution of the test sequence with the specified configuration objects.
            </summary>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
            <param name="testConfigs">An array of test config objects containing test-specific configuration.</param>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.SequentialTestSequence`3">
            <summary>
            Represents a test sequence that can execute repeatedly, once per test config object.
            </summary>
            <typeparam name="TStationConfig">Type of Station Config used in the derived class.</typeparam>
            <typeparam name="TProductConfig">Type of Product Config used in the derived class.</typeparam>
            <typeparam name="TTestConfig">Type of Test Config used in the derived class.</typeparam>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.SequentialTestSequence`3.ExecuteTest(System.Threading.CancellationToken,`0,`1,`2)">
            <summary>
            Executes the test sequence.
            </summary>
            <param name="token">A cancellation token used to support cooperative cancellation. Should periodically call <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/>.</param>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
            <param name="testConfig">Test config instance containing test-specific configuration.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.SequentialTestSequence`3.ExecuteSequence(`0,`1,`2[])">
            <summary>
            Start execution of the test sequence with the specified configuration objects.
            </summary>
            <param name="stationConfig">Station config instance containing station-specific configuration.</param>
            <param name="productConfig">Product config instance containing product-specific configuration.</param>
            <param name="testConfigs">Zero or more test config instances containing test-specific configuration.</param>
            <returns>A <see cref="T:TsdLib.Measurements.TestResultCollection"/> containing the test results.</returns>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager">
            <summary>
            Contains functionality to abort test sequences and manage test sequence errors.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager.#ctor">
            <summary>
            Initialize a new <see cref="T:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager"/>.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager.Abort(System.Exception)">
            <summary>
            Abort the test sequence due to user cancellation or error.
            </summary>
            <param name="error">If cancelling due to error, pass the responsible exception. If cancelling to to user, pass null.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager.InitializeLifetimeService">
            <summary>
            Prevents remoting exceptions due to lease expiration in a secondary AppDomain
            </summary>
            <returns>null</returns>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager.CancelledByUser">
            <summary>
            Returns true if the test sequence was cancelled by the user. False if it was cancelled due to internal error.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager.Error">
            <summary>
            Gets or sets the internal error responsible for test sequence cancellation.
            </summary>
        </member>
        <member name="P:TsdLib.TestSystem.TestSequence.TestSequenceCancellationManager.Token">
            <summary>
            Gets a <see cref="T:System.Threading.CancellationToken"/> that can be checked to determine if cancellation has been requested.
            </summary>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.TestSequenceException">
            <summary>
            Exception due to an invalid test sequence source code file.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceException.#ctor(TsdLib.Configuration.Common.SequenceConfigCommon,System.String,System.Exception)">
            <summary>
            Initialize a TestSequenceException for the specified test sequence.
            </summary>
            <param name="testSequence">Name of the test sequence that caused the error.</param>
            <param name="message">A message describing the exception.</param>
            <param name="inner">OPTIONAL: The Exception that is the cause of the TestSequenceException.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor used by the .NET Framework to initialize an instance of the TestSequenceException class from serialized data.
            </summary>
            <param name="info">The SerialzationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains the contextual information about the source or destination.</param>
        </member>
        <member name="T:TsdLib.TestSystem.TestSequence.TestSequenceInstrumentCollection">
            <summary>
            Contains functionality to track and manage a collection of instruments.
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceInstrumentCollection.#ctor">
            <summary>
            Initialize a new <see cref="T:TsdLib.TestSystem.TestSequence.TestSequenceInstrumentCollection"/>
            </summary>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceInstrumentCollection.FactoryEvents_Connected(System.Object,TsdLib.Instrument.IInstrument)">
            <summary>
            Event handler invoked when a new instrument is connected to the test sequence.
            </summary>
            <param name="sender">The factory class responsible for connecting to the new instrument.</param>
            <param name="e">The new <see cref="T:TsdLib.Instrument.IInstrument"/>.</param>
        </member>
        <member name="M:TsdLib.TestSystem.TestSequence.TestSequenceInstrumentCollection.Dispose">
            <summary>
            Disconnect from the instrument factory events and dispose all connected instruments.
            </summary>
        </member>
        <member name="E:TsdLib.TestSystem.TestSequence.TestSequenceInstrumentCollection.InstrumentConnected">
            <summary>
            Event fired when a new instrument is connected to the test sequence.
            </summary>
        </member>
    </members>
</doc>
